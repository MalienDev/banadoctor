version: '3.8'

services:
  postgres:
    image: postgis/postgis:13-3.1
    container_name: banadoctor-db
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-banadoctor}
      POSTGRES_USER: ${POSTGRES_USER:-banadoctor}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-banadoctor}
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    ports:
      - "5432:5432"
    networks:
      - banadoctor-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-banadoctor} -d ${POSTGRES_DB:-banadoctor}"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:6
    container_name: banadoctor-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - banadoctor-network
    command: redis-server --requirepass ${REDIS_PASSWORD:-your_redis_password}

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.10.2
    container_name: banadoctor-elasticsearch
    environment:
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - banadoctor-network

  kibana:
    image: docker.elastic.co/kibana/kibana:7.10.2
    container_name: banadoctor-kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - banadoctor-network

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: banadoctor-backend
    command: >
      sh -c "python manage.py wait_for_db &&
             python manage.py migrate &&
             python manage.py runserver 0.0.0.0:8000"
    volumes:
      - ./backend:/app
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgres://${POSTGRES_USER:-banadoctor}:${POSTGRES_PASSWORD:-banadoctor}@postgres:5432/${POSTGRES_DB:-banadoctor}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-your_redis_password}@redis:6379/0
      - ELASTICSEARCH_DSL_HOST=elasticsearch
    depends_on:
      - postgres
      - redis
      - elasticsearch
    networks:
      - banadoctor-network

  frontend-web:
    build:
      context: ./frontend-web
      dockerfile: Dockerfile
    container_name: banadoctor-frontend
    ports:
      - "3000:3000"
    volumes:
      - ./frontend-web:/app
      - /app/node_modules
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000/api
    depends_on:
      - backend
    networks:
      - banadoctor-network

  nginx:
    image: nginx:alpine
    container_name: banadoctor-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - backend
      - frontend-web
    networks:
      - banadoctor-network

networks:
  banadoctor-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  elasticsearch_data:
