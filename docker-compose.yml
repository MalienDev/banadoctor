version: '3.8'

services:
  # PostgreSQL with PostGIS
  postgres:
    image: postgis/postgis:13-3.1
    container_name: medecin_africa_db
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-medecin_africa}
      POSTGRES_USER: ${POSTGRES_USER:-meduser}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-medpass}
    volumes:
      - postgres_data:/var/lib/postgresql/data/
      - ./postgres/init:/docker-entrypoint-initdb.d/
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-meduser}"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - medecin-network

  # Redis for caching and Celery
  redis:
    image: redis:6
    container_name: medecin_africa_redis
    command: redis-server --requirepass ${REDIS_PASSWORD:-redispass}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - medecin-network

  # Elasticsearch for search functionality
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.10.2
    container_name: medecin_africa_es
    environment:
      - node.name=es01
      - cluster.name=es-docker-cluster
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - es_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200"]
      interval: 10s
      timeout: 10s
      retries: 5
    networks:
      - medecin-network

  # Kibana for Elasticsearch visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:7.10.2
    container_name: medecin_africa_kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - medecin-network

  # Django Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: medecin_africa_backend
    command: >
      sh -c "python manage.py wait_for_db &&
             python manage.py migrate &&
             python manage.py runserver 0.0.0.0:8000"
    volumes:
      - ./backend:/app
      - static_volume:/app/static
      - media_volume:/app/media
    env_file:
      - .env
    environment:
      - DJANGO_SETTINGS_MODULE=medecin_api.settings.local
      - POSTGRES_HOST=postgres
      - POSTGRES_DB=${POSTGRES_DB:-medecin_africa}
      - POSTGRES_USER=${POSTGRES_USER:-meduser}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-medpass}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redispass}@redis:6379/0
      - ELASTICSEARCH_DSL_HOST=elasticsearch
      - CELERY_BROKER_URL=redis://:${REDIS_PASSWORD:-redispass}@redis:6379/1
      - CELERY_RESULT_BACKEND=redis://:${REDIS_PASSWORD:-redispass}@redis:6379/1
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    networks:
      - medecin-network

  # Celery Worker
  celery_worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: medecin_africa_celery_worker
    command: celery -A medecin_api worker --loglevel=info
    volumes:
      - ./backend:/app
    env_file:
      - .env
    environment:
      - DJANGO_SETTINGS_MODULE=medecin_api.settings.local
      - POSTGRES_HOST=postgres
      - POSTGRES_DB=${POSTGRES_DB:-medecin_africa}
      - POSTGRES_USER=${POSTGRES_USER:-meduser}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-medpass}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redispass}@redis:6379/0
      - CELERY_BROKER_URL=redis://:${REDIS_PASSWORD:-redispass}@redis:6379/1
      - CELERY_RESULT_BACKEND=redis://:${REDIS_PASSWORD:-redispass}@redis:6379/1
    depends_on:
      - postgres
      - redis
    networks:
      - medecin-network

  # Celery Beat
  celery_beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: medecin_africa_celery_beat
    command: celery -A medecin_api beat --loglevel=info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    volumes:
      - ./backend:/app
    env_file:
      - .env
    environment:
      - DJANGO_SETTINGS_MODULE=medecin_api.settings.local
      - POSTGRES_HOST=postgres
      - POSTGRES_DB=${POSTGRES_DB:-medecin_africa}
      - POSTGRES_USER=${POSTGRES_USER:-meduser}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-medpass}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redispass}@redis:6379/0
      - CELERY_BROKER_URL=redis://:${REDIS_PASSWORD:-redispass}@redis:6379/1
      - CELERY_RESULT_BACKEND=redis://:${REDIS_PASSWORD:-redispass}@redis:6379/1
    depends_on:
      - postgres
      - redis
      - celery_worker
    networks:
      - medecin-network

  # Next.js Frontend
  frontend-web:
    build:
      context: ./frontend-web
      dockerfile: Dockerfile
    container_name: medecin_africa_frontend
    volumes:
      - ./frontend-web:/app
      - /app/node_modules
      - /app/.next
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://localhost:8000/api
    depends_on:
      - backend
    networks:
      - medecin-network

  # Nginx as reverse proxy
  nginx:
    image: nginx:1.21-alpine
    container_name: medecin_africa_nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - static_volume:/app/static
      - media_volume:/app/media
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend
      - frontend-web
    networks:
      - medecin-network

# Named volumes for persistent data
volumes:
  postgres_data:
  redis_data:
  es_data:
  static_volume:
  media_volume:

# Custom network for all services
networks:
  medecin-network:
    driver: bridge
