name: CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  DOCKER_REGISTRY: ghcr.io
  DOCKER_IMAGE_PREFIX: ${{ github.repository_owner }}
  KUBE_CONFIG: ${{ secrets.KUBE_CONFIG_STAGING }}
  KUBE_NAMESPACE: banadoctor

jobs:
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Scan for secrets
        uses: trufflesecurity/trufflehog@v3.5.0
        with:
          path: .
          base: main
          head: HEAD

      - name: Scan Docker images
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          format: 'table'
          exit-code: '1'
          severity: 'CRITICAL,HIGH'

  lint-and-test:
    name: Lint and Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # ===== Django Linting et Tests =====
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Installer les dépendances Python
        working-directory: backend
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
          if [ -f requirements-observability.txt ]; then
            pip install -r requirements-observability.txt
          fi

      - name: Lancer Flake8
        working-directory: backend
        run: |
          pip install flake8
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --max-complexity=10 --max-line-length=127 --statistics

      - name: Lancer les tests Django
        working-directory: backend
        run: |
          pip install pytest pytest-django
          python manage.py test

      # ===== Next.js Linting et Tests =====
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Installer les dépendances Node.js
        working-directory: frontend-web
        run: npm ci

      - name: Lancer ESLint
        working-directory: frontend-web
        run: npm run lint

      - name: Lancer les tests Next.js
        working-directory: frontend-web
        run: npm test -- --watchAll=false

      # ===== Flutter Linting et Tests =====
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'

      - name: Lancer Flutter analyze
        working-directory: frontend-mobile
        run: flutter analyze

      - name: Lancer les tests Flutter
        working-directory: frontend-mobile
        run: flutter test

  build-and-push:
    name: Build and Push Docker Images
    needs: lint-and-test
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Django backend
        id: build_backend
        uses: docker/build-push-action@v4
        with:
          context: backend
          push: true
          tags: |
            ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_PREFIX }}/banadoctor-backend:${{ github.sha }}
            ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_PREFIX }}/banadoctor-backend:latest

      - name: Build and push Next.js frontend
        id: build_frontend
        uses: docker/build-push-action@v4
        with:
          context: frontend-web
          push: true
          tags: |
            ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_PREFIX }}/banadoctor-frontend:${{ github.sha }}
            ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_PREFIX }}/banadoctor-frontend:latest

  deploy-staging:
    name: Deploy to Staging
    needs: build-and-push
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure Kubernetes
        uses: azure/k8s-set-context@v3
        with:
          kubeconfig: ${{ secrets.KUBE_CONFIG_STAGING }}

      - name: Verify image versions
        run: |
          echo "Verifying image versions..."
          kubectl get pods -n ${{ env.KUBE_NAMESPACE }} --no-headers | awk '{print $1}' | while read pod; do
            kubectl describe pod $pod -n ${{ env.KUBE_NAMESPACE }} | grep Image:
          done

      - name: Deploy to Kubernetes (Staging)
        run: |
          kubectl apply -f infra/k8s/00-namespace.yaml
          kubectl apply -f infra/k8s/secrets/
          kubectl apply -f infra/k8s/postgres/
          kubectl apply -f infra/k8s/redis/
          kubectl apply -f infra/k8s/elasticsearch/
          kubectl apply -f infra/k8s/kibana/
          kubectl apply -f infra/k8s/backend/
          kubectl apply -f infra/k8s/frontend/
          kubectl apply -f infra/k8s/ingress/

      - name: Run integration tests
        working-directory: backend
        run: |
          pip install pytest pytest-django
          python manage.py test integration_tests/

  deploy-production:
    name: Deploy to Production
    needs: build-and-push
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure Kubernetes
        uses: azure/k8s-set-context@v3
        with:
          kubeconfig: ${{ secrets.KUBE_CONFIG_PRODUCTION }}

      - name: Deploy to Kubernetes (Production)
        run: |
          kubectl apply -f infra/k8s/00-namespace.yaml
          kubectl apply -f infra/k8s/secrets/
          kubectl apply -f infra/k8s/postgres/
          kubectl apply -f infra/k8s/redis/
          kubectl apply -f infra/k8s/elasticsearch/
          kubectl apply -f infra/k8s/kibana/
          kubectl apply -f infra/k8s/backend/
          kubectl apply -f infra/k8s/frontend/
          kubectl apply -f infra/k8s/ingress/
